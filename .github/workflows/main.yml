name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  # ============================================
  # EXISTING: Your working Tauri builds
  # ============================================
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'ubuntu-22.04-arm' # Only available in public repos.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: filera-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'filera v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          uploadPlainBinary: true

  # ============================================
  # NEW: Nix build for NixOS users
  # ============================================
  build-nix:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # NEW: Install Nix with flakes support
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      
      # NEW: Setup Cachix for binary caching
      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: filera  # Replace with your Cachix cache name
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      # NEW: Build using Nix
      - name: Build with Nix
        run: |
          nix build .#default --print-build-logs
      
      # NEW: Push to Cachix
      - name: Push to Cachix
        run: |
          cachix push filera result
      
      # NEW: Create tarball for release
      - name: Package Nix binary
        run: |
          mkdir -p nix-release
          cp result/bin/filera nix-release/
          cd nix-release
          tar -czf filera-nix-linux-x86_64.tar.gz filera
          cd ..
      
      # NEW: Upload to the same release as Tauri builds
      - name: Upload Nix binary to release
        uses: softprops/action-gh-release@v1
        with:
          files: nix-release/filera-nix-linux-x86_64.tar.gz
          tag_name: ${{ github.ref }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # NEW: Test Nix installation works
  # ============================================
  test-nix-install:
    needs: build-nix
    runs-on: ubuntu-latest
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: filera
      
      - name: Test installation from Cachix
        run: |
          nix profile install github:joncorv/filera
          filera --version || filera --help
